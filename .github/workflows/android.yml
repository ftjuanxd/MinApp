name: Optimized Android CI/CD Pipeline

on:
  push:
    branches:
      - main
      - 'sprint-*/*'
  pull_request:
    branches:
      - main

jobs:
  # =================================================================
  # JOB 1: Compilar, ejecutar pruebas unitarias y crear el APK
  # =================================================================
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 1. Checkout code
        uses: actions/checkout@v4

      - name: 2. Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: 3. Fix gradlew line endings (for Linux)
        run: sed -i 's/\r$//' ./gradlew

      - name: 4. Make gradlew executable
        run: chmod +x ./gradlew

      - name: 5. Run unit tests and build APK
        # CORRECCIÓN: Se añade --no-daemon para mayor estabilidad en CI.
        run: ./gradlew testDebugUnitTest assembleDebug assembleDebugAndroidTest --no-daemon

      - name: 6. Upload APK artifacts
        # Sube tanto el APK de la app como el APK de pruebas para que el siguiente job los use
        uses: actions/upload-artifact@v4
        with:
          name: apks
          path: |
            app/build/outputs/apk/debug/app-debug.apk
            app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk

  # =================================================================
  # JOB 2: Ejecutar pruebas de instrumentación en paralelo
  # =================================================================
  test:
    needs: build # Este job depende de que 'build' termine con éxito
    runs-on: macos-latest # ¡IMPORTANTE! macos-latest tiene aceleración de hardware (KVM)
    strategy:
      matrix:
        shard: [1, 2, 3, 4] # Crea 4 trabajos paralelos para las pruebas
      fail-fast: false # Permite que todos los shards terminen aunque uno falle
    
    steps:
      - name: 1. Checkout code
        uses: actions/checkout@v4

      - name: 2. Fix gradlew line endings (for macOS)
        run: sed -i '' 's/\r$//' ./gradlew

      - name: 3. Make gradlew executable
        run: chmod +x ./gradlew

      - name: 4. Set shard index environment variable
        run: echo "SHARD_INDEX=$((${{ matrix.shard }} - 1))" >> $GITHUB_ENV

      - name: 5. Download APK artifacts
        uses: actions/download-artifact@v4
        with:
          name: apks
          path: apks/

      - name: 6. Run Android instrumented tests (Shard ${{ matrix.shard }}/${{ strategy.job-total }})
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-le
